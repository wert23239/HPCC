% GLOBAL
  groups = []                                # (string) name spaces (also names) of groups to be created (in addition to the default 'no name' space
                                             #    group.)
  mode = run                                 # (string) mode to run MABE in [run,visualize]
  outputDirectory = ./                       # (string) where files will be written
  popSize = 100                              # (int) number of genomes in the population
  randomSeed = -1                           # (int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 8000                            # (int) how long the program will run

% ARCHIVIST
  outputMethod = LODwAP                      # (string) output method, [Default, LODwAP, SSwD]

% ARCHIVIST_DEFAULT
  aveFileColumns = []                        # (string) data to be saved into average file (must be values that can generate an average). If empty,
                                             #    MABE will try to figure it out
  aveFileName = ave.csv                      # (string) name of average file (saves population averages)
  dominantFileName = dominant.csv            # (string) name of dominant file (saves data on dominant organism)
  dominantFileShowAllLists = 1               # (bool) lists named 'all'* in data map will be averaged and added to file. if true, raw 'all'* lists
                                             #    will also be added to the file
  realtimeSequence = :10                     # (string) How often to write to realtime data files. (format: x = single value, x-y = x to y, x-y:z = x
                                             #    to y on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotDataFilePrefix = snapshotData      # (string) prefix for name of snapshot genome file (stores genomes)
  snapshotDataSequence = :100                # (string) How often to save a realtime snapshot data file. (format: x = single value, x-y = x to y,
                                             #    x-y:z = x to y on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200,
                                             #    300:100'
  snapshotGenomeFilePrefix = snapshotGenome  # (string) prefix for name of snapshot data file (stores everything but genomes)
  snapshotGenomeSequence = :1000             # (string) How often to save a realtime snapshot genome file. (format: x = single value, x-y = x to y,
                                             #    x-y:z = x to y on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200,
                                             #    300:100'
  writeAveFile = 0                           # (bool) Save data to average file?
  writeDominantFile = 0                      # (bool) Save data to dominant file?
  writeSnapshotDataFiles = 0                 # (bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotGenomeFiles = 0               # (bool) if true, snapshot genome files will be written (with all genomes for entire population)

% ARCHIVIST_LODWAP
  dataFileConvertAllLists = 1                # (bool) if true, lists named 'all'* in data map will be averaged and added to file
  dataFileName = data.csv                    # (string) name of genome file (stores genomes for line of decent)
  dataFileShowAllLists = 1                   # (bool) if true, lists named 'all'* in data map will be saved
  dataSequence = :100                        # (string) How often to write to data file. (format: x = single value, x-y = x to y, x-y:z = x to y on
              	                             #    x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  genomeFileName = genome.csv                # (string) name of data file (stores everything but genomes)
  genomeSequence = :100	                    # (string) How often to write genome file. (format: x = single value, x-y = x to y, x-y:z = x to y on x,
                                             #    :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  pruneInterval = 100                        # (int) How often to attempt to prune LOD and actually write out to files
  terminateAfter = 0                       # (int) how long to run after updates (to get allow time for coalescence)
  writeDataFile = 1                          # (bool) if true, a data file will be written
  writeGenomeFile = 1                        # (bool) if true, a genome file will be written

% ARCHIVIST_SSWD
  cleanupInterval = 100                      # (int) How often to cleanup old checkpoints
  dataDelay = 10                             # (int) when using Snap Shot with Delay output Method, how long is the delay before saving data
  dataFilePrefix = data                      # (string) name of genome file (stores genomes)
  dataSequence = :100                        # (string) when to save a data file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z =
                                             #    from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  genomeDelay = 10                           # (int) when using Snap Shot with Delay output Method, how long is the delay before saving genomes 
  genomeFilePrefix = genome                  # (string) name of data file (stores everything but genomes)
  genomeSequence = :1000                     # (string) when to save a genome file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z =
                                             #    from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeDataFiles = 1                         # (bool) if true, data files will be written
  writeGenomeFiles = 1                       # (bool) if true, genome files will be written

% OPTIMIZER
  elitism = 0                                # (int) if the chosen optimizer allows for elitism, The highest scoring brain will be included in the
                                             #    next generation this many times (0 = no elitism)?
  optimizer = GA                             # (string) optimizer to be used, [GA, Tournament, Tournament2]
  tournamentSize = 5                         # (int) how many genomes to consider when doing Tournament selection? 1 will result in random selection.

% PARAMETER_FILES
  commentIndent = 45                         # (int) minimum space before comments
  maxLineLength = 150                        # (int) maximum line length

% VISUALIZATION_MODE
  visualizeOrgIDs = [-1]                     # (string) ID of Genome you would like to visualize. -1 last genome file, -2 all genomes in file (world
                                             #    must support group evaluate)
  visualizePopulationFile = genome_1000.csv  # (string) which genome file do you wish to load

