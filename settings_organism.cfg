% BRAIN
  bitsPerBrainAddress = 8                    # (int) how many bits are evaluated to determine the brain addresses
  bitsPerCodon = 8                           # (int) how many bits are evaluated to determine the codon addresses
  brainType = Markov                         # (string) brain to be used, [Markov, Human]
  hiddenNodes = 8                            # (int) number of hidden nodes, if brain type supports hiden nodes
  serialProcessing = 0                       # (bool) outputs from units will write to nodes, not nodesNext

% BRAIN_HUMAN
  actionMapFileName = actionMap.txt          # (string) if useActionMap = true, use this file
  useActionMap = 0                           # (bool) if true, an action map will be used to translate user input

% BRAIN_MARKOV_ADVANCED
  randomizeUnconnectedOutputs = 1            # (bool) output nodes with no connections will be set randomly (default : false, behavior set to 0)
  randomizeUnconnectedOutputsMax = 1.0       # (double) random values resulting from randomizeUnconnectedOutput will be in the range of 0 to
                                             #    randomizeUnconnectedOutputsMax
  randomizeUnconnectedOutputsType = 0        # (int) determines type of values resulting from randomizeUnconnectedOutput [0 = int, 1 = double]

% BRAIN_MARKOV_GATES_DETERMINISTIC
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 1                                  # (bool) set to true to enable deterministic gates?
  initialCount = 6                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_EPSILON
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable epsilon gates
  epsilonSource = 0.05                       # (double) if value is in ance tha[0,1], cht output will be randomized. if < 1 or < 0, epsilon value is
                                             #    determined by the genome. If positive, then the genome handler will advance int(value) number of sites -
                                             #    1 from the current location, before reading. If the value is negative, then int(abs(value)) indicates
                                             #    the absolute index of the site to be used i.e.(site at abs(value) in genome)
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_GENETICPROGRAMING
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable GP (what?) gates
  constValueMax = 1.0                        # (double) for the const values, max value the genome can generate
  constValueMin = -1.0                       # (double) for the const values, min value the genome can generate
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_NEURON
  allow = 0                                  # (bool) set to true to enable Neuron gates
  allowRepression = 0                        # (bool) if false, neuronGates only fire if charge exceeds threshold; if true, neuronGates can also
                                             #    exist which always fire, except when charge exceeds threshold
  decayRateMax = 0.0                         # (double) amount charge will decay (towards 0) per update
  decayRateMin = 0.0                         # (double) amount charge will decay (towards 0) per update
  deliveryChargeFromNode = 0                 # (bool) if true, gate will have additional input, which will be used as deliveryCharge
  deliveryChargeMax = 1.0                    # (double) output charge
  deliveryChargeMin = -1.0                   # (double) output charge
  deliveryError = 0.0                        # (double) error in deliveryCharge... charge -= random[0,deliveryError)
  dischargeBehavior = 0                      # (int) what happens when gate fires (-1: let genome decide, 0: clear charge, 1: 'reduce' by delivery
                                             #    charge, 2: 1/2 charge)
  initialCount = 3                           # (int) seed genome with this many start codons
  numInputsMax = 3                           # (int) max number of inputs to neuronGate
  numInputsMin = 3                           # (int) min number of inputs to neuronGate
  thresholdFromNode = 0                      # (bool) if true, gate will have additional input, which will be used as threshold
  thresholdMax = 1.0                         # (double) highest possible value for threshold
  thresholdMin = -1.0                        # (double) lowest possible value for threshold

% BRAIN_MARKOV_GATES_PROBABILISTIC
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 1                                  # (bool) set to true to enable probabilistic gates
  initialCount = 10                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_TRIT
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable tritDeterministic gates
  initialCount = 3                           # (int) seed genome with this many start codons

% BRAIN_MARKOV_GATES_VOID
  IO_Ranges = 1-4,1-4                        # (string) range of number of inputs and outputs (min inputs-max inputs,min outputs-max outputs)
  allow = 0                                  # (bool) set to true to enable void gates
  epsilonSource = 0.05                       # (double) if value is in [0,1], chance that output will be randomized. if < 1 or < 0, epsilon value is
                                             #    determined by the genome. If positive, then the genome handler will advance int(value) number of sites -
                                             #    1 from the current location, before reading. If the value is negative, then int(abs(value)) indicates
                                             #    the absolute index of the site to be used i.e.(site at abs(value) in genome
  initialCount = 3                           # (int) seed genome with this many start codons

% GENOME
  alphabetSize = 256.0                       # (double) alphabet size for genome
  genomeType = Circular                      # (string) genome to be used, [Circular, Multi]
  sitesType = char                           # (string) type for sites in genome [char, int, double, bool]

% GENOME_CIRCULAR
  mutationCopyMaxSize = 512                  # (int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  # (int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 # (double) per site insertion rate
  mutationCrossCount = 3                     # (int) number of crosses when performing crossover (including during recombination)
  mutationDeleteMaxSize = 512                # (int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                # (int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               # (double) per site deletion rate
  mutationPointRate = 0.005                  # (double) per site point mutation rate
  sizeInitial = 5000                         # (int) starting size for genome
  sizeMax = 20000                            # (int) if genome is larger then this, mutations will only decrease chromosome size
  sizeMin = 2000                             # (int) if genome is smaller then this, mutations will only increase chromosome size

% GENOME_MULTI
  chromosomeSizeInitial = 5000               # (int) starting size for all chromosomes in genome (inital genome size will be chromosomeSizeInitial *
                                             #    chromosome_sets * chromosome_ploidy)
  chromosomeSizeMax = 20000                  # (int) if a chromosome is larger then this, mutations will only decrease chromosome size
  chromosomeSizeMin = 2000                   # (int) if a chromosome is smaller then this, mutations will only increase chromosome size
  chromosome_ploidy = 1                      # (int) number of chromosomes in each chromosome_set
  chromosome_sets = 1                        # (int) number of chromosome sets (e.g. chromosome_set = 2 and chromosome_ploidy = 3 will result in a
                                             #    genome with 6 chromosomes)
  mutationCopyMaxSize = 512                  # (int) maximum size of insertion mutation
  mutationCopyMinSize = 128                  # (int) minimum size of insertion mutation
  mutationCopyRate = 0.00002                 # (double) per site insertion rate
  mutationCrossCount = 3                     # (int) number of crosses when performing crossover
  mutationDeleteMaxSize = 512                # (int) maximum size of insertion mutation
  mutationDeleteMinSize = 128                # (int) minimum size of insertion mutation
  mutationDeleteRate = 0.00002               # (double) per site deletion rate
  mutationPointRate = 0.005                  # (double) per site point mutation rate

